#!/usr/bin/bash

ABOUT="\n
DragonRuby Version (Manager) \n
by @f-3r (https://github.com/f-3r/drv)
"
HELP="\n
Available commands:\n
\`drv versions\` => list all installed versions \n
\`drv use <version>\` => activates <version>\n
\`drv install <zip-file>\` => installs the DragonRuby version in the zip file \n
\`drv setup <directory> <version>\` => creates a new project skeleton using the specified DragonRuby version.
\n
\`drv\` will automatically detect \`.drv\` file in the root of you project \n
and set the version. \n
If you set up your projects using \`drv setup\` you should be all set.
"

INSTALL_DIR="$HOME/.drv/versions"
GIT_IGNORE=".dragonruby\nbuilds\ndocs\ninclude\nsamples\nCHANGELOG*\nconsole-logo.png\nctags*\ndragonruby*\neula.txt\nffmpeg\nfont.ttf\nlogs\nmygame-template\nopen-source-licenses.txt\ntmp\nVERSION.txt"

VERSIONS=()

function drv__reload_versions()
{
    VERSIONS=()
    for V in $INSTALL_DIR/*
    do
      VERSIONS+=(`basename $V`)
    done
}

function drv__list_versions()
{
    drv__reload_versions
    echo -e "Installed DragonRuby versions:\n"
    for V in "${VERSIONS[@]}"
    do
        if [[ "$V" == "$DRAGON_RUBY_VERSION" ]]; then
            echo " => $V"
        else
            echo " -  $V"
        fi
    done
}

function drv__validate_version()
{
    drv__reload_versions

    if [[ " ${VERSIONS[@]} " =~ " $1 " ]]; then
        return 0
    else
        return 1
    fi
}

function drv__use_version()
{
    drv__validate_version $1 || {
        echo "DragonRuby version $1 is not installed. Currently installed versions are:"
        drv__list_versions
        return 1
    }

    export DRAGON_RUBY_VERSION=$1
    export DRAGON_RUBY_PATH=$INSTALL_DIR/$DRAGON_RUBY_VERSION
    export PATH=$DRAGON_RUBY_PATH:$PATH

    echo "DragonRuby version $1 activated."
    echo 'You can now run `dragonruby <your-game-dir>` to start your game'
}

function drv__install_version()
{
    DR_ZIP=$1

    [[ "$DR_ZIP" =~ \.zip$ ]] || {
        echo "The file provided is not a DragonRuby zip"
        return 1
    }

    rm -rf $INSTALL_DIR/tmp && mkdir -p $INSTALL_DIR/tmp
    unzip -qq $DR_ZIP -d $INSTALL_DIR/tmp || {
      echo "File extraction failed: unzip $DR_ZIP -d $INSTALL_DIR/tmp"
      return 1
    }

    SOURCE=$(echo $INSTALL_DIR/tmp/*)

    [[ -x "$SOURCE/dragonruby" ]] || {
        echo "There's not dragonruby executable inside the zip file. Is $DR_ZIP a DragonRuby installation?"
        return 1
    }

    local VERSION=`head -n 1 $SOURCE/CHANGELOG-CURR.txt | cut -d" " -f2 | sed 's/ *$//g'`
    echo "DragonRuby $VERSION detected."

    local TARGET=$INSTALL_DIR/$VERSION

    [[ -d $TARGET ]] && {
        echo "DragonRuby $VERSION is already installed. You can uninstall it running \`drv uninstall $VERSION\`"
        return 1
    }

    mv $SOURCE $TARGET
    rm -rf $INSTALL_DIR/tmp

    drv__use_version $VERSION
    echo "DragonRuby $VERSION installed and activated."

}

function drv__uninstall_version()
{
    rm -r "$INSTALL_DIR/$1"
    echo "DragonRuby version $1 uninstalled"
}

function drv__setup()
{
  local DIR=$1
  local VERSION=$2

  [[ -z "$DIR" ]] && {
    echo "Must specify a directory name for your game"
    return 1
  }

  [[ -z "$VERSION" ]] && {
    echo "Must specify a DragonRuby version to use"
    return 1
  }

  echo "Warning: This will override your project's metadata and other engine files needed for building your game with factory defaults."

  read -p "Do you want to continue (yes)? " PROCEED
  [[ "$PROCEED" != "yes" ]] && return 0

  mkdir -p $DIR/mygame && cd $DIR
  which git && git init .

  drv__use_version $VERSION

  cp -r $DRAGON_RUBY_PATH/{.dragonruby,open-source-licenses.txt,CHANGELOG-CURR.txt,CHANGELOG-PREV.txt,console-logo.png,dragonruby-controller.png,dragonruby.png} .
  echo -e $GIT_IGNORE > .gitignore
  echo $VERSION >> .drv

  echo "Done! Project set up successfully"
}


function drv__use_version_from_file()
{
    local DIR="$PWD/"
    local VERSION=""

    until [[ -z "$DIR" ]]; do
        DIR="${DIR%/*}" # parent dir
        if { read -r VERSION < "$DIR/.drv"; } 2>/dev/null || [[ -n "$VERSION" ]]; then
            if [[ "$VERSION" == "$DRAGON_RUBY_VERSION" ]]; then
                return 0
            else
                drv__use_version "$VERSION"
                return $?
            fi
        fi
    done

}


function drv()
{
    CMD=$1
    case "$CMD" in
        versions)
            drv__list_versions
        ;;
        use)
            drv__use_version $2
        ;;
        install)
            drv__install_version $2
        ;;
        uninstall)
            drv__uninstall_version $2
        ;;
        setup)
            drv__setup $2 $3
        ;;
        "")
            echo -e $ABOUT
            echo -e $HELP
        ;;
        *)
            echo "invalid command \`$CMD\`. Available commands are: "
            echo -e $HELP
    esac
}

trap '[[ "$BASH_COMMAND" != "$PROMPT_COMMAND" ]] && drv__use_version_from_file' DEBUG
